// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var RelationsPlugin;
    return RelationsPlugin = (function(_super) {

      __extends(RelationsPlugin, _super);

      function RelationsPlugin() {
        return RelationsPlugin.__super__.constructor.apply(this, arguments);
      }

      RelationsPlugin.prototype.name = 'relations';

      RelationsPlugin.prototype.howManyItemsInside = function(aArray, bArray) {
        var aItem, bItem, count, _i, _j, _len, _len1;
        count = 0;
        for (_i = 0, _len = aArray.length; _i < _len; _i++) {
          aItem = aArray[_i];
          for (_j = 0, _len1 = bArray.length; _j < _len1; _j++) {
            bItem = bArray[_j];
            if (aItem === bItem) {
              ++count;
              break;
            }
          }
        }
        return count;
      };

      RelationsPlugin.prototype.parseAfter = function(opts, next) {
        var balUtil, docpad, documents, logger, me;
        balUtil = require('bal-util');
        me = this;
        docpad = this.docpad;
        logger = this.logger;
        documents = docpad.getCollection('documents');
        docpad.log('debug', 'Generating relations');
        documents.forEach(function(document) {
          var relatedDocuments, tags;
          tags = document.get('tags') || [];
          relatedDocuments = documents.findAll({
            tags: {
              '$in': tags
            },
            id: {
              $ne: document.id
            }
          }).live(true).setComparator(function(a, b) {
            return me.howManyItemsInside(a, tags) < me.howManyItemsInside(b, tags);
          });
          return document.relatedDocuments = relatedDocuments;
        });
        docpad.log('debug', 'Generated relations');
        return next();
      };

      RelationsPlugin.prototype.renderBefore = function(opts, next) {
        var docpad, documents;
        docpad = this.docpad;
        documents = docpad.getCollection('documents');
        documents.forEach(function(document) {
          var relatedDocumentsArray, _ref;
          relatedDocumentsArray = ((_ref = document.relatedDocuments) != null ? _ref.toJSON() : void 0) || [];
          return document.set({
            relatedDocuments: relatedDocumentsArray
          });
        });
        return next();
      };

      return RelationsPlugin;

    })(BasePlugin);
  };

}).call(this);
