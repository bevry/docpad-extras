// Generated by CoffeeScript 1.3.3

/*
This plugin is still in beta, don't use it.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var AuthenticatePlugin, User;
    User = (function() {

      User.prototype.email = null;

      User.prototype.username = null;

      User.prototype.name = null;

      User.prototype.url = null;

      User.prototype.id = null;

      function User(user) {
        this.apply(user);
      }

      User.prototype.fromGithub = function(user) {
        return this.apply(user);
      };

      User.prototype.apply = function(user) {
        var key, value;
        for (key in user) {
          if (!__hasProp.call(user, key)) continue;
          value = user[key];
          this[key] = value;
        }
        return this.normalize();
      };

      User.prototype.normalize = function() {
        return this.id || (this.id = this.username || this.email);
      };

      return User;

    })();
    return AuthenticatePlugin = (function(_super) {

      __extends(AuthenticatePlugin, _super);

      function AuthenticatePlugin() {
        return AuthenticatePlugin.__super__.constructor.apply(this, arguments);
      }

      AuthenticatePlugin.prototype.name = 'authenticate';

      AuthenticatePlugin.prototype.config = {};

      AuthenticatePlugin.prototype.maintainers = {};

      AuthenticatePlugin.prototype.authenticated = {};

      AuthenticatePlugin.prototype.users = {};

      AuthenticatePlugin.prototype.User = User;

      AuthenticatePlugin.prototype.user = null;

      AuthenticatePlugin.prototype.isAuthenticated = function() {
        return this.user != null;
      };

      AuthenticatePlugin.prototype.authenticate = function() {
        var _this = this;
        return everyauth.github.appId(this.config.github.appId).appSecret(this.config.github.appSecret).redirectPath('/').findOrCreateUser(function(session, accessToken, accessTokenExtra, githubUserMetadata) {
          return _this.users[user.id] = _this.users[user.id] || new User().fromGithub(githubUserMetadata);
        });
      };

      AuthenticatePlugin.prototype.getUser = function(user) {
        user || (user = this.user);
        if (!(user instanceof this.User)) {
          user = null;
        }
        return user;
      };

      AuthenticatePlugin.prototype.setUser = function(user) {
        this.user = this.getUser(user);
        return this;
      };

      AuthenticatePlugin.prototype.newUser = function(user) {
        return new this.User(user);
      };

      AuthenticatePlugin.prototype.isMaintainer = function(user) {
        var maintainer, _i, _len, _ref;
        user = this.getUser(user);
        if (!user) {
          return false;
        }
        _ref = this.docpad.maintainers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          maintainer = _ref[_i];
          if ((maintainer.email != null) && maintainer.email === user.email) {
            return true;
          }
        }
        return false;
      };

      return AuthenticatePlugin;

    })(BasePlugin);
  };

}).call(this);
