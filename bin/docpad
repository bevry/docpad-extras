#!/usr/bin/env coffee
###
DocPad command line interface by Benjamin Lupton and ~eldios
###

# Requires
fs = require 'fs'
path = require 'path'
DocPad = require "#{__dirname}/../lib/docpad.coffee"
program = require "#{__dirname}/../node_modules/commander/index.js"
cwd = process.cwd()


# -------------------------------------
# Configuration

# Create DocPad Instance
docpadConfig = 
	skeleton: program.skeleton
	port: program.port
docpad = DocPad.createInstance docpadConfig
logger = docpad.logger

# Version
program.version(docpad.version or 'unknown')

# Options
program
	.option(
		'-s, --skeleton <skeleton>'
		"the skeleton to create your project from, defaults to bootstrap"
	)
	.option(
		'-p, --port <port>'
		"the port to use for the docpad server <port>, defaults to 9788"
		parseInt
	) 
	.option(
		'-d, --debug [level]'
		"the level of debug messages you would like to display, if specified defaults to 7, otherwise 6"
		parseInt
	)

# Parse the Configuration
applyConfiguration = (docpadInstance, programConfig={}, customConfig={}) ->
	# Apply program configuration
	for own key, value of programConfig
		if docpadInstance.config[key]?
			docpadInstance.config[key] = value
	# Apply custom configuration
	for own key, value of customConfig
		if docpadInstance.config[key]?
			docpadInstance.config[key] = value
	# Return updated config object
	docpadInstance.config


# -------------------------------------
# Events

# Completed an action
# If we are in cli mode, then ask what is next
actionCompleted = (err) ->
	throw err  if err
	if program.mode is 'cli'
		console.log ''
		program.emit 'cli', []

# Completed a docpad action
docpadActionCompleted = (err) ->
	if err
		logger.log 'error', "The DocPad action had problems"
	else
		logger.log 'info', "The DocPad action has completed successfully"
	actionCompleted(err)


# -------------------------------------
# Commands

# Run
program
	.command('run')
	.description('does everyting: scaffold, generate, watch, server')
	.action ->
		applyConfiguration(docpad,program)
		docpad.action 'all', docpadActionCompleted

# Skeleton
program
	.command('scaffold')
	.description('fills the current working directory with the optional --skeleton')
	.action ->
		applyConfiguration(docpad,program)
		docpad.action 'scaffold', docpadActionCompleted

# Render
program
	.command('render')
	.description('render a given file path, if stdin is provided use that in combination')
	.action ->
		docpad.config.logLevel = 5
		applyConfiguration(docpad,program)
		logger.transports[0].config.level = 5

		# Check
		if program.args.length is 1
			docpad.error("You must pass a filename to the render command")

		# File details
		document = docpad.createDocument()
		document.filename = program.args[0]
		document.fullPath = program.args[0]
		document.data = ''

		# Prepare
		useStdin = true
		renderDocument = ->
			document.load (err) ->
				throw err  if err
				document.contextualize (err) ->
					throw err  if err
					docpad.action 'render', {document:document}, (err) ->
						throw err  if err
						console.log document.contentRendered
						#docpadActionCompleted()
						process.exit(0)
			
		# Timeout if we don't have stdin
		timeout = setTimeout(
			->
				# Clear timeout
				timeout = null
				# Skip if we are using stdin
				return  if document.data.replace(/\s+/,'')
				# Close stdin as we are not using it
				useStdin = false
				stdin.pause()
				# Render the document
				renderDocument()
			,1000
		)

		# Read stdin
		stdin = process.stdin
		stdin.resume()
		stdin.setEncoding('utf8')
		stdin.on 'data', (data) ->
			document.data += data.toString()
		process.stdin.on 'end', ->
			return  unless useStdin
			if timeout
				clearTimeout(timeout)
				timeout = null
			renderDocument()

# Generate
program
	.command('generate')
	.description('(re)generates the output')
	.action ->
		applyConfiguration(docpad,program)
		docpad.action 'generate', docpadActionCompleted

# Watch
program
	.command('watch')
	.description('(re)generates the output whenever a change is made')
	.action ->
		applyConfiguration(docpad,program)
		docpad.action 'watch', docpadActionCompleted

# Server
program
	.command('server')
	.description('creates a docpad server instance with the optional --port')
	.action ->
		applyConfiguration(docpad,program)
		docpad.action 'server', docpadActionCompleted

# CLI
program
	.command('cli')
	.description('start the interactive cli')
	.action ->
		program.mode = 'cli'
		program.promptSingleLine 'What would you like to do now?\n> ',  (input) ->
			args = input.split /\s+/g
			if args.length
				if args[0] is 'docpad'
					args.shift()
			args.unshift process.argv[0]
			args.unshift process.argv[1]
			program.parse args

# Version
program
	.command('info')
	.description('display information about our docpad instance')
	.action ->
		console.log require('util').inspect docpad.config
		actionCompleted()

# exit
program
	.command('exit')
	.description('exit the cli')
	.action ->
		process.exit(0)

# Help
program
	.command('help')
	.description('display the cli help')
	.action ->
		applyConfiguration(docpad,program)
		console.log program.helpInformation()
		actionCompleted()

# Unknown
program
	.command('*')
	.action ->
		program.emit 'help', []


# -------------------------------------
# Initialise

# Start
program.parse process.argv
